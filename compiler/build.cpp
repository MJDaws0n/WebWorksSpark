#include <iostream>
#include <string>
#include <vector>
#include <variant>
#include <sstream>
#include <memory>
   struct Variable {std::string name;std::string type;std::variant<std::string, std::shared_ptr<Variable>> value;};Variable msg_out(const Variable& var) {std::visit([](auto&& arg) {std::cout << arg << std::endl;}, var.value);return Variable{"WWS_TEMP_STRING","string",var.value};}int stringToInt(const std::string& str) {try {return std::stoi(str);} catch (...) {return 0;}}Variable maths_multiply(const std::vector < Variable > & vars) {int accumulator = 1;for (const auto & msg: vars) {if (std::holds_alternative < std::string > (msg.value)) {accumulator *= stringToInt(std::get < std::string > (msg.value));} else if (std::holds_alternative < std::shared_ptr < Variable >> (msg.value)) {Variable combination = (maths_multiply({* std::get < std::shared_ptr < Variable >> (msg.value)}));accumulator *= stringToInt(std::get < std::string > (combination.value));}}return Variable {"WWS_TEMP_NUMBER","number",std::to_string(accumulator)};}Variable str_combine(const std::vector < Variable > & vars) {std::string output = "";int firstTypeIsNum = 0;int accumulator = 0;for (const auto & msg: vars) {if (std::holds_alternative < std::string > (msg.value)) {if(firstTypeIsNum == 0 && (msg.type) == "number"){firstTypeIsNum = 1;} else if(firstTypeIsNum == 0){firstTypeIsNum = -1;}if(firstTypeIsNum == 1){accumulator += stringToInt(std::get < std::string > (msg.value));} else{output += std::get < std::string > (msg.value);}} else if (std::holds_alternative < std::shared_ptr < Variable >> (msg.value)) {Variable combination = (str_combine({* std::get < std::shared_ptr < Variable >> (msg.value)}));if(firstTypeIsNum == 0 && (combination.type) == "number"){firstTypeIsNum = 1;} else if(firstTypeIsNum == 0){firstTypeIsNum = -1;}if(firstTypeIsNum == 1){accumulator += stringToInt(std::get < std::string > (combination.value));} else{output += std::get < std::string > (combination.value);}}}if(firstTypeIsNum == 1){return Variable {"WWS_TEMP_NUMBER","number",std::to_string(accumulator)};}return Variable {"WWS_TEMP_STRING","string",output};}std::string give_num() {return "123";}int main() {msg_out(str_combine({Variable { "WWS_TEMP_NUMBER","number",std::make_shared<Variable>(str_combine({Variable{"WWS_TEMP_NUMBER", "number", std::make_shared<Variable>(Variable{"WWS_TEMP_NUMBER", "number", "2"})},Variable{"WWS_TEMP_NUMBER", "number", std::make_shared<Variable>(Variable{"WWS_TEMP_NUMBER", "number", "1"})}}))}}));return 0;}